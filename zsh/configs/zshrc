# .zshrc is for interactive shells

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.config/zsh/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
#if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
#  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
#fi

# profile startup
# zmodload zsh/zprof

# see options for zsh on sharing history https://zsh.sourceforge.io/Doc/Release/Options.html#History
# SHELL_SESSIONS_DISABLE=1 should also be set in .zshenv on macOs
setopt SHARE_HISTORY

# alias tmux='tmux -f ~/.config/tmux/tmux.conf'

# add ~/.local/bin to $PATH if it exists
[[ -d ~/.local/bin ]] && path=(~/.local/bin $path)

# add brew to $PATH (prezto brew module needs it on the path)
#[[ -d /opt/homebrew ]] && eval "$(/opt/homebrew/bin/brew shellenv)"
#[[ -d ~/.linuxbrew ]] && eval "$(~/.linuxbrew/bin/brew shellenv)"
if command -v brew > /dev/null; then
  export DYLD_FALLBACK_LIBRARY_PATH="$(brew --prefix)/lib"
  [[ -d "$(brew --prefix)/opt/llvm" ]] && path=("$(brew --prefix)/opt/llvm/bin" $path)
fi;

# zgenom - an optimized zsh package manager
export ZGEN_DIR=$XDG_DATA_HOME/zgenom
[[ ! -d $ZGEN_DIR ]] && git clone https://github.com/jandamm/zgenom.git "$ZGEN_DIR"
source "$ZGEN_DIR/zgenom.zsh"
zgenom autoupdate
if ! zgenom saved; then
  zgenom compdef

  # prezto
  zgenom prezto editor dot-expansion yes
  zgenom prezto prompt theme sorin

  zmodload zsh/terminfo

  # Load some oh-my-zsh plugins
  zgenom ohmyzsh plugins/ssh-agent
  zgenom ohmyzsh plugins/colored-man-pages
  zgenom ohmyzsh plugins/brew
  if [[ $(uname -a | grep -ci Darwin) = 1 ]]; then
    # Load macOS-specific plugins - https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/macos
    zgenom ohmyzsh plugins/macos
  fi

  # load after omz
  zgenom prezto

  # everything else
  #zgenom load romkatv/powerlevel10k powerlevel10k
  zgenom load zsh-users/zsh-completions src
  zgenom load zsh-users/zsh-syntax-highlighting
  zgenom load zsh-users/zsh-history-substring-search
  zgenom load jonmosco/kube-ps1

  zgenom save
  # zgenom compile ~/.zshrc
  zgenom compile $ZDOTDIR/.zshrc
  zgenom compile $ZDOTDIR
fi

RPROMPT='$(kube_ps1)'$RPROMPT

zstyle :omz:plugins:ssh-agent agent-forwarding yes
zstyle :omz:plugins:ssh-agent helper ksshaskpass
zstyle :omz:plugins:ssh-agent lazy yes
zstyle :omz:plugins:ssh-agent ssh-add-args --apple-load-keychain

# Put Go pkgs in $XDG_DATA_HOME, add GOBIN to the path, add brew libs to CGO
if command -v go > /dev/null; then
  export GOPATH=$XDG_DATA_HOME/go
  [[ -d $GOPATH/bin ]] && path=("$GOPATH/bin" $path)
  if command -v brew > /dev/null; then export CGO_LDFLAGS="-L$(brew --prefix)/lib"; fi
fi

# never generate .pyc files: it's slower, but maintains your sanity
if command -v python > /dev/null; then export PYTHONDONTWRITEBYTECODE=1; fi

# lazy load pyenv
export PYENV_ROOT=${PYENV_ROOT:-$XDG_DATA_HOME/pyenv}
[[ -a "$PYENV_ROOT/bin/pyenv" ]] && path=("$PYENV_ROOT/bin" $path)
if type pyenv &> /dev/null || [[ -a $PYENV_ROOT/bin/pyenv ]]; then
  function pyenv() {
    unset pyenv
    path=("$PYENV_ROOT/shims" $path)
    eval "$(command pyenv init -)"
    if command -v pyenv-virtualenv-init > /dev/null; then
      eval "$(pyenv virtualenv-init -)"
      export PYENV_VIRTUALENV_DISABLE_PROMPT=1
    fi
    pyenv "$@"
  }
fi

# lazy load rbenv
export RBENV_ROOT=${RBENV_ROOT:-$XDG_DATA_HOME/rbenv}
[[ -a $RBENV_ROOT/bin/rbenv ]] && path=("$RBENV_ROOT/bin" $path)
if type rbenv &> /dev/null || [[ -a $RBENV_ROOT/bin/rbenv ]]; then
  function rbenv() {
    unset rbenv
    path=("$RBENV_ROOT/shims" $path)
    eval "$(command rbenv init -)"
  }
fi

# zsh keybinds
bindkey '^[[H' beginning-of-line # Home
bindkey '^[[F' end-of-line       # End
# mac-style text navigation for minimal terminal emulators
bindkey "\e[1;3D" backward-word # ⌥←
bindkey "\e[1;3C" forward-word  # ⌥→
bindkey "$terminfo[kcuu1]" history-substring-search-up
bindkey "$terminfo[kcud1]" history-substring-search-down
#bindkey '^[[A' history-substring-search-up
#bindkey '^[[B' history-substring-search-down

if [[ ! -z "$ZSH_VERSION" ]]; then
  # all of our zsh files
  typeset -U config_files
  config_files=($DOTFILES/**/*.zsh)

  # load the path files
  for file in ${(M)config_files:#*/path.zsh}
  do
    source $file
  done

  # load everything but the path and completion files
  for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}
  do
    source $file
  done

  # initialize autocomplete here, otherwise functions won't be loaded
  autoload -U compinit
  compinit

  # load every completion after autocomplete loads
  for file in ${(M)config_files:#*/completion.zsh}
  do
    source $file
  done

  unset config_files
fi

# Stash your environment variables in ~/.localrc. This means they'll stay out
# of your main dotfiles repository (which may be public, like this one), but
# you'll have access to them in your scripts.
if [[ -a ~/.localrc ]]
then
  source ~/.localrc
fi

# 1password plugins
source /Users/c.mayne/.config/op/plugins.sh

# To customize prompt, run `p10k configure` or edit ~/.config/zsh/.p10k.zsh.
#[[ ! -f "$ZDOTDIR/.p10k.zsh" ]] || source "$ZDOTDIR/.p10k.zsh"
#(( ! ${+functions[p10k]} )) || p10k finalize

# zprof

